// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// coclust
S4 coclust(NumericMatrix& xMat, std::vector<unsigned int> myList, std::vector<std::string> distrib_names, int kr, std::vector<int> kc, std::string init, int nbSEM, int nbSEMburn, int nbRepeat, int nbindmini, const std::vector<int> m, NumericVector functionalDataV, std::vector<int> zrinit, std::vector<int> zcinit, std::vector<double> percentRandomB, std::vector<double> percentRandomP);
RcppExport SEXP _mixedClust_coclust(SEXP xMatSEXP, SEXP myListSEXP, SEXP distrib_namesSEXP, SEXP krSEXP, SEXP kcSEXP, SEXP initSEXP, SEXP nbSEMSEXP, SEXP nbSEMburnSEXP, SEXP nbRepeatSEXP, SEXP nbindminiSEXP, SEXP mSEXP, SEXP functionalDataVSEXP, SEXP zrinitSEXP, SEXP zcinitSEXP, SEXP percentRandomBSEXP, SEXP percentRandomPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type xMat(xMatSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type myList(myListSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type distrib_names(distrib_namesSEXP);
    Rcpp::traits::input_parameter< int >::type kr(krSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type kc(kcSEXP);
    Rcpp::traits::input_parameter< std::string >::type init(initSEXP);
    Rcpp::traits::input_parameter< int >::type nbSEM(nbSEMSEXP);
    Rcpp::traits::input_parameter< int >::type nbSEMburn(nbSEMburnSEXP);
    Rcpp::traits::input_parameter< int >::type nbRepeat(nbRepeatSEXP);
    Rcpp::traits::input_parameter< int >::type nbindmini(nbindminiSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type functionalDataV(functionalDataVSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type zrinit(zrinitSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type zcinit(zcinitSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type percentRandomB(percentRandomBSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type percentRandomP(percentRandomPSEXP);
    rcpp_result_gen = Rcpp::wrap(coclust(xMat, myList, distrib_names, kr, kc, init, nbSEM, nbSEMburn, nbRepeat, nbindmini, m, functionalDataV, zrinit, zcinit, percentRandomB, percentRandomP));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mixedClust_coclust", (DL_FUNC) &_mixedClust_coclust, 16},
    {NULL, NULL, 0}
};

RcppExport void R_init_mixedClust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
